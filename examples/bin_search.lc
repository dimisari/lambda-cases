
or type: Comparison
values: lesser | equal | greater

type nickname: ArrayWithLength = ArrayOf(Int)s x Int

type nickname: Index = Int

compare(_)with(_) : Int x Int => Comparison
  = (a, b) =>
    (a < b) -> ?
      true => lesser
      false =>
        (a == b) -> ?
          true => equal
          false => greater

list : ListOf(Int)s
  = [3, 4, 7, 8, 10, 12, 15, 17, 20, 23, 28, 35]

array : ArrayWithLength
  = zip(indexes)with(list) -> array_from_list(_) -> (_, ll)
    where
    ll : Int
      = (list)length

    indexes : ListOf(Int)s
      = from(0)to(ll - 1)

arr_bin_search(_, _, _) : Index x ArrayWithLength x Int => Possibly(Index)
  = (ind, arr, target) =>
    (arr.2nd == 0) -> ?
      true => no_value
      false =>
        index(middle_ind)of_array(arr.1st) -> ?
          no_value => no_value
          a_value =>
            compare(the_value)with(target) -> ?
              lesser => arr_bin_search(middle_ind + 1, new_arr, target)
              greater => arr_bin_search(ind, new_arr, target)
              equal => a_value--middle_ind
    where
    middle_ind : Index
      = ind + (arr.2nd - 1)div(2)

    new_arr : ArrayWithLength
      = (arr.1st, (arr.2nd)div(2))

try(_) : Int => Program
  = i => print("Trying " + i) ; result_msg(arr_bin_search(0,array, i))
    where
    result_msg(_) : Possibly(Index) => Program
      = ?
        no_value => print("Target Not Found")
        a_value => print("Found! The index is: " + the_value)

main : Program
  = for_all_in(from(0)to(40), try(_))

