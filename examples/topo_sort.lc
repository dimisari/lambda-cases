type nickname: Graph = ListOf(Node)s

tuple type: Node = Char x Children
field names: (n_name, n_children)

type nickname: Children = ListOf(Char)s

tuple type: State = ListOf(VisitedNode)s x ListOf(DoneNode)s
field names: (vns, dns)

type nickname: StateMan = State(State)Man

type nickname: VisitedNode = Char

type nickname: DoneNode = Char

or type: AllDoneOutcome
values: not_all_done--<node_to_do : Char> | all_done

topo_sort_on_graph(_) : Graph => ListOf(DoneNode)s
  = g => final_state_of(topo_sort_from_state)on_init_state(is).dns
    where
    is : State
      = ([], [])

    topo_sort_from_state : StateMan
      = get_state >> _.dns o> check_all_done o> ?
        all_done => do_nothing
        not_all_done => topo_sort_on_node(node_to_do) ; topo_sort_from_state
        where
        check_all_done : ListOf(DoneNode)s => AllDoneOutcome
          = dns => check_all_in_dns(node_names)
            where
            check_all_in_dns(_) : ListOf(Char)s => AllDoneOutcome
              = ?
                [] => all_done
                [n1, ns = ...] =>
                  (n1)is_in(dns) -> ?
                    true => check_all_in_dns(ns)
                    false => not_all_done--n1

        node_names : ListOf(Char)s
          = apply(_.n_name)to_all_in(g)

    topo_sort_on_node(_) : Char => StateMan
      = node_name =>
        children -> ?
          [] => add_to_done
          cs =>
            add_to_visited ; topo_sort_on_children(cs) ; remove_from_visited ;
            add_to_done
        where
        children : Children
          = get_children_from_list(g)
            where
            get_children_from_list(_) : ListOf(Node)s => Children
              = ?
                [] => throw_err("Should be impossible: I'm not in the nodes!")
                [n, ns = ...] =>
                  (node_name == n.n_name) -> ?
                    true => n.n_children
                    false => get_children_from_list(ns)

        add_to_done : StateMan
          = modify_state_with(s => (s.vns, node_name + s.dns))

        add_to_visited : StateMan
          = modify_state_with(s => (node_name + s.vns, s.dns))

        remove_from_visited : StateMan
          = modify_state_with(s => (remove_from(s.vns), s.dns))
            where
            remove_from(_) : ListOf(VisitedNode)s => ListOf(VisitedNode)s
              = ?
                [] => throw_err("Should be impossible: I'm not in visited")
                [vn, vns = ...] =>
                  (vn == node_name) -> ?
                    true => vns
                    false => vn + remove_from(vns)

    topo_sort_on_children(_) : Children => StateMan
      = ?
        [] => do_nothing
        [c, cs = ...] =>
          topo_sort_on_child ; topo_sort_on_children(cs)
          where
          topo_sort_on_child : StateMan
            = check_not_in_visited_or_done >> ?
              true => topo_sort_on_node(c)
              false => do_nothing

          check_not_in_visited_or_done : (Bool)FState(State)Man
            = apply(f)inside(get_state)
              where
              f : State => Bool
                = s => not((c)is_in(s.vns) | (c)is_in(s.dns))

test_graph : Graph
  = [ ('4', ['6'])
    , ('3', ['4', '2', '1', '5'])
    , ('1', ['8', '9'])
    , ('2', ['4'])
    , ('5', ['7'])
    , ('6', [])
    , ('7', [])
    , ('8', [])
    , ('9', [])
    ]

main : Program
  = topo_sort_on_graph(test_graph) -> print(_)
